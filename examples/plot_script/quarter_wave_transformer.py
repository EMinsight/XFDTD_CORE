import numpy as np
from matplotlib import pyplot as plt
import os

def dft(time, data, freq):
  res = np.zeros_like(freq, dtype=np.complex128)
  for i, f in enumerate(freq):
    res[i] = np.sum(data*np.exp(-1j*2*np.pi*f*time))
  return res

def quarter_wave_transformer(data_dir:str):
  freq_path = os.path.join(data_dir, 'frequencies.npy')
  s11_path = os.path.join(data_dir, 's11.npy')
  s21_path = os.path.join(data_dir, 's21.npy')

  freq = np.load(freq_path)
  s11 = np.load(s11_path)
  s21 = np.load(s21_path)

  fig, ax = plt.subplots(2, 1, figsize=(8, 6))
  ax[0].plot(freq/1e9, 20*np.log10(np.abs(s11)), label='$S_{11}$')
  ax[0].set_xlabel('Frequency (GHz)')
  ax[0].set_ylabel('Magnitude (dB)')
  ax[0].set_ylim(-40, 0)
  ax[0].legend()
  ax[0].grid(True)
  ax[1].plot(freq/1e9, 20*np.log10(np.abs(s21)), label='$S_{21}$')
  ax[1].set_xlabel('Frequency (GHz)')
  ax[1].set_xlabel('Frequency (GHz)')
  ax[1].set_ylabel('Magnitude (dB)')
  ax[1].legend()
  ax[1].grid(True)

  # plt.show()

  v_source = np.load(os.path.join(data_dir, 'v_source.npy'))
  v1 = np.load(os.path.join(data_dir, 'v1.npy'))
  v2 = np.load(os.path.join(data_dir, 'v2.npy'))
  c1 = np.load(os.path.join(data_dir, 'c1.npy'))
  c2 = np.load(os.path.join(data_dir, 'c2.npy'))

  fig, ax = plt.subplots(2, 1, figsize=(8, 6))
  ax[0].plot(v1[0,:], v1[1,:], label='$V_1$')
  ax[0].plot(v2[0,:], v2[1,:], label='$V_2$')
  ax[0].plot(v_source[0,:], v_source[1,:], label='$V_{source}$')
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Voltage (V)')
  ax[0].legend()
  ax[0].grid(True)
  ax[1].plot(c1[0,:], c1[1,:], label='$C_1$')
  ax[1].plot(c2[0,:], c2[1,:], label='$C_2$')
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Current (A)')
  ax[1].legend()
  ax[1].grid(True)

  v_source_fft = dft(v_source[0,:], v_source[1,:], freq)
  v1_fft = dft(v1[0,:], v1[1,:], freq)
  v2_fft = dft(v2[0,:], v2[1,:], freq)
  c1_fft = dft(c1[0,:], c1[1,:], freq)
  c2_fft = dft(c2[0,:], c2[1,:], freq)


  fig, ax = plt.subplots(2, 2, figsize=(8, 6))
  ax[0,0].plot(freq/1e9, 20*np.log10(np.abs(v1_fft)), label='$V_1$')
  ax[0,0].plot(freq/1e9, 20*np.log10(np.abs(v2_fft)), label='$V_2$')
  ax[0,0].plot(freq/1e9, 20*np.log10(np.abs(v_source_fft)), label='$V_{source}$')
  ax[0,0].set_xlabel('Frequency (GHz)')
  ax[0,0].set_ylabel('Magnitude (dB)')
  ax[0,0].legend()
  ax[0,0].grid(True)
  ax[0,1].plot(freq/1e9, 20*np.log10(np.abs(c1_fft)), label='$C_1$')
  ax[0,1].plot(freq/1e9, 20*np.log10(np.abs(c2_fft)), label='$C_2$')
  ax[0,1].set_xlabel('Frequency (GHz)')
  ax[0,1].set_ylabel('Magnitude (dB)')
  ax[0,1].legend()
  ax[0,1].grid(True)
  ax[1,0].plot(freq/1e9, np.angle(v1_fft), label='$V_1$')
  ax[1,0].plot(freq/1e9, np.angle(v2_fft), label='$V_2$')
  ax[1,0].plot(freq/1e9, np.angle(v_source_fft), label='$V_{source}$')
  ax[1,0].set_xlabel('Frequency (GHz)')
  ax[1,0].set_ylabel('Phase (rad)')
  ax[1,0].legend()
  ax[1,0].grid(True)
  ax[1,1].plot(freq/1e9, np.angle(c1_fft), label='$C_1$')
  ax[1,1].plot(freq/1e9, np.angle(c2_fft), label='$C_2$')
  ax[1,1].set_xlabel('Frequency (GHz)')
  ax[1,1].set_ylabel('Phase (rad)')
  ax[1,1].legend()
  ax[1,1].grid(True)

  a1 = 0.5 * (v1_fft + 50 * c1_fft) / np.sqrt(50)
  a2 = 0.5 * (v2_fft + 50 * c2_fft) / np.sqrt(50)
  b1 = 0.5 * (v1_fft - 50 * c1_fft) / np.sqrt(50)
  b2 = 0.5 * (v2_fft - 50 * c2_fft) / np.sqrt(50)

  fig, ax = plt.subplots(2, 2, figsize=(8, 6))
  ax[0,0].plot(freq/1e9, 20*np.log10(np.abs(a1)), label='$A_1$')
  ax[0,0].plot(freq/1e9, 20*np.log10(np.abs(a2)), label='$A_2$')
  ax[0,0].set_xlabel('Frequency (GHz)')
  ax[0,0].set_ylabel('Magnitude (dB)')
  ax[0,0].legend()
  ax[0,0].grid(True)
  ax[0,1].plot(freq/1e9, 20*np.log10(np.abs(b1)), label='$B_1$')
  ax[0,1].plot(freq/1e9, 20*np.log10(np.abs(b2)), label='$B_2$')
  ax[0,1].set_xlabel('Frequency (GHz)')
  ax[0,1].set_ylabel('Magnitude (dB)')
  ax[0,1].legend()
  ax[0,1].grid(True)
  ax[1,0].plot(freq/1e9, np.angle(a1), label='$A_1$')
  ax[1,0].plot(freq/1e9, np.angle(a2), label='$A_2$')
  ax[1,0].set_xlabel('Frequency (GHz)')
  ax[1,0].set_ylabel('Phase (rad)')
  ax[1,0].legend()
  ax[1,0].grid(True)
  ax[1,1].plot(freq/1e9, np.angle(b1), label='$B_1$')
  ax[1,1].plot(freq/1e9, np.angle(b2), label='$B_2$')
  ax[1,1].set_xlabel('Frequency (GHz)')
  ax[1,1].set_ylabel('Phase (rad)')
  ax[1,1].legend()
  ax[1,1].grid(True)

  plt.show()


if __name__ == '__main__':
  quarter_wave_transformer('../data/quarter_wave_transformer')